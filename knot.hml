<!DOCTYPE html>
<html>
<head>
    <title>Knot theory</title>
    <style>
        body { margin: 0; }
        canvas { width: 100%; height: 100% }
    </style>
</head>
<body>
    <script src="https://threejs.org/build/three.js"></script>
    <script>
        // Create a scene
        var scene = new THREE.Scene();

        // Create a camera
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 10;

        // Create a renderer and add it to the DOM
        var renderer = new THREE.WebGLRenderer({antialias: true});
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Create a knot geometry with higher detail
        var geometry = new THREE.TorusKnotGeometry(2, 0.5, 200, 32);

        // Create a material using MeshNormalMaterial without opacity
        var material = new THREE.MeshNormalMaterial();

        // Create a knot mesh with the geometry and material
        var knot = new THREE.Mesh(geometry, material);
        scene.add(knot);

        // Mouse control
        var isMouseDown = false;
        var onMouseDownPosition = new THREE.Vector2();

        function onMouseDown(event) {
            isMouseDown = true;
            onMouseDownPosition.x = event.clientX;
            onMouseDownPosition.y = event.clientY;
        }

        function onMouseUp() {
            isMouseDown = false;
        }

        function onMouseMove(event) {
            if (isMouseDown) {
                var onMouseMovePosition = new THREE.Vector2();
                onMouseMovePosition.x = event.clientX;
                onMouseMovePosition.y = event.clientY;

                var difference = new THREE.Vector2();
                difference.subVectors(onMouseMovePosition, onMouseDownPosition);

                knot.rotation.y += difference.x * 0.01;
                knot.rotation.x += difference.y * 0.01;

                onMouseDownPosition.x = event.clientX;
                onMouseDownPosition.y = event.clientY;
            }
        }

        renderer.domElement.addEventListener('mousedown', onMouseDown, false);
        renderer.domElement.addEventListener('mouseup', onMouseUp, false);
        renderer.domElement.addEventListener('mousemove', onMouseMove, false);

        // Create a render function
        function animate() {
            requestAnimationFrame(animate);

            // Add automatic rotation
            if (!isMouseDown) {
                knot.rotation.x += 0.01;
                knot.rotation.y += 0.01;
            }

            // Render the scene with the camera
            renderer.render(scene, camera);
        };

        // Start the animation
        animate();
    </script>
</body>
</html>
